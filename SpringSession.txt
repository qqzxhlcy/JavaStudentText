解决负载均衡中Session问题，不适用ip hash

1、Session机制：
由于Http协议是无状态协议，一次交互过程只是一次对话，一般不会记住是谁发起的对象，如果需要记住，就需要使用session

2、Cookie：记录session对象信息

3、url：
当Cookie被禁用的时候就会使用url，但是太丑（再url栏加session=xxx）


负载均衡中丢失Session问题最大的原因就是不同服务器的jvm里的session对象不统一，导致不断更新session，所以为了解决这一问题，可以设置
一个公共的Session对象，当服务器发出session的时候，不再去jvm中找session，而是去公共的存放session的地方去查找。这个地方我们叫做：
共享容器，例如数据库或redis


Session会话共享方案：
第一种：使用容器拓展插件，比如Tomcat的tomcat-redis-session-manger，基于Jetty的。这种方案对项目来说是透明的，无需改动代码，但是坏处
太过于依赖容器，当容器升级之后又得重新配置，底层是复制session到其他容器，会有一定的延迟，并且不能部署太多服务器

第二种：使用Nginx负载均衡的ip hash策略，但是每次访问只能绑定一台服务器，这种方法局限性太大。ip地址不能换

第三种：自己写一套session会话管理工具，在需要会话的时候都从自己的工具获取

第四种：使用框架的会话管理工具。也就是Spring session。既不依赖容器，也不需要改代码


SpringSession：
特性：
1、提供用户的session管理的api和实现
2、提供HttpSession，以中立的方法取得web容器中的session。比如tomcat的session
3、支持集群的session处理。不必绑定到具体的web容器去解决集群下共享session的问题

使用步骤：
加入依赖
<!-- https://mvnrepository.com/artifact/javax.servlet/servlet-api  -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
            <version>${spring-session.version}</version>
            <type>pom</type>
        </dependency>
        
       <dependency>
            <groupId>biz.paluch.redis</groupId>
            <artifactId>lettuce</artifactId>
            <version>3.5.0.Final</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

配置xml文件：
 <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>


然而在springboot中这些太繁琐，所以：
加入依赖：
 <!--spring boot-->
       <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!--spring session-->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.session</groupId>
        <artifactId>spring-session-data-redis</artifactId>
    </dependency>

在配置文件中加入配置
#spring session使用存储类型，默认就是redis所以可以省略
spring.session.store-type=redis

最后在启动类上加入注解！
@EnableCaching
@EnableRedisHttpSession
这样就能实现了！